const canvasRef = useRef<HTMLCanvasElement | null>(null);
  const fanRefs = useRef<THREE.Object3D[]>([]);

  useEffect(() => {
    const scene = new THREE.Scene();

    const camera = new THREE.PerspectiveCamera(
      70,
      window.innerWidth / window.innerHeight,
      0.1,
      1000
    );
    camera.position.set(0, 2, 10);

    const renderer = new THREE.WebGLRenderer({
      canvas: canvasRef.current!,
      antialias: true,
    });
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(window.devicePixelRatio);
    renderer.toneMapping = THREE.ACESFilmicToneMapping;
    renderer.toneMappingExposure = 1;
    renderer.outputColorSpace = THREE.SRGBColorSpace;

    const ambientLight = new THREE.AmbientLight(0x404040, 2);
    const gui = new GUI();
    const lightFolder = gui.addFolder('Light');
    lightFolder.add(ambientLight, 'intensity', 0, 10).name('Ambient Light Intensity');
    scene.add(ambientLight);
    const directionalLight = new THREE.DirectionalLight(0xffffff, 1.5);
    directionalLight.position.set(5, -100, 7.5);
    scene.add(directionalLight);
    const light2Folder = gui.addFolder('Light');
    light2Folder.add(directionalLight, 'intensity', 0, 10).name('Directional Light Intensity');
    scene.add(directionalLight)
    const directionalLightHelper = new THREE.DirectionalLightHelper(directionalLight, 5);
    scene.add(directionalLightHelper);

    const lightPositionFolder = gui.addFolder('Directional Light Position');
    lightPositionFolder.add(directionalLight.position, 'x', -100, 100).name('X');
    lightPositionFolder.add(directionalLight.position, 'y', -100, 100).name('Y');
    lightPositionFolder.add(directionalLight.position, 'z', -100, 100).name('Z');




    // Load GLTF model
    const loader = new GLTFLoader();
    loader.load(
      "/text/computer-_pc_futuristic.glb",
      (gltf) => {
        scene.add(gltf.scene);
      },
      undefined,
      (error) => {
        console.error("Error loading GLTF model:", error);
      }
    );

    const controls = new OrbitControls(camera, renderer.domElement);
    controls.enableDamping = true;
    controls.dampingFactor = 0.25;
    controls.enableZoom = true;

    let isInteracting = false;

    // Detect interaction with OrbitControls
    controls.addEventListener("start", () => {
      isInteracting = true;
    });
    controls.addEventListener("end", () => {
      isInteracting = false;
    });

    const handleResize = () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    };
    window.addEventListener("resize", handleResize);

    const animate = () => {
      requestAnimationFrame(animate);

      // Rotate fans when interacting
      if (isInteracting) {
        fanRefs.current.forEach((fan) => {
          fan.rotation.y += 0.1; // Adjust speed as needed
        });
      }

      controls.update();
      renderer.render(scene, camera);
    };
    animate();

    return () => {
      window.removeEventListener("resize", handleResize);
      controls.dispose();
      renderer.dispose();
    };
  }, []);